#!/usr/bin/env python3
"""
Command-line version of App Angle Patcher
Based on the concept from khronokernel's gist
Version 1.0.0 (2025)
"""

import os
import sys
import shutil
import plistlib
import argparse
import subprocess
import re
from pathlib import Path
from typing import Dict, List, Optional, Tuple, Set


class AppPatcher:
    def __init__(self, language: str = "en"):
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        self.applications_dir = Path("/Applications")
        self.user_applications_dir = Path("~/Applications").expanduser()
        self.backup_dir = Path("~/Applications/App-Backups").expanduser()
        
        # –¢–µ–∫—É—â–∏–π —è–∑—ã–∫
        self.language = language
        
        # –¶–µ–ª–µ–≤—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–∞—Ç—á–∏–Ω–≥–∞
        self.target_apps = {
            "–Ø–Ω–¥–µ–∫—Å", "Yandex", "–Ø–Ω–¥–µ–∫—Å –±—Ä–∞—É–∑–µ—Ä", "Yandex Browser",
            "–Ø–Ω–¥–µ–∫—Å –º—É–∑—ã–∫–∞", "Yandex Music", 
            "Xcode", "Simulator", "Instruments",
            "Google Chrome", "Chromium", "Microsoft Edge",
            "Brave Browser", "Discord", "Slack", 
            "Visual Studio Code", "Electron", "WhatsApp",
            "Telegram", "Signal", "Mozilla Firefox", "Opera"
        }
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã –ø–∞—Ç—á–∏–Ω–≥–∞
        self.patch_modes = {
            "gl": "--use-angle=gl",
            "metal": "--use-angle=metal",
            "vulkan": "--use-vulkan",
            "disable-gpu": "--disable-gpu",
            "custom": "custom"
        }
        
        # –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
        self.translations = {
            "en": {
                "backup_created": "‚úÖ Backup created: {}",
                "backup_failed": "‚ö†Ô∏è Warning: Could not create backup: {}",
                "app_patched": "‚úÖ App patched: {}",
                "launch_args": "üöÄ Launch arguments: {}",
                "app_restored": "‚úÖ App restored from backup: {}",
                "backups_cleaned": "‚úÖ All backups removed",
                "no_backups": "‚ÑπÔ∏è No backups found",
                "already_patched": "‚ÑπÔ∏è App {} is already patched",
                "plist_not_found": "‚ùå Error: Info.plist not found in {}",
                "executable_not_found": "‚ùå Error: Could not get executable name",
                "executable_missing": "‚ùå Error: Executable {} not found",
                "patching_error": "‚ùå Error patching {}: {}",
                "restore_error": "‚ùå Error restoring {}: {}",
                "backup_not_found": "‚ùå Backup for {} not found",
                "select_patch_mode": "üéØ Available patch modes:",
                "choose_mode": "Choose mode (1-5):",
                "enter_custom_args": "Enter custom arguments:",
                "invalid_choice": "‚ùå Invalid choice. Try again.",
                "create_backup_question": "Create backup for {}? (y/n):",
                "yes_no_prompt": "Please enter 'y' or 'n'",
                "available_apps": "üìã Available apps for {}:",
                "selection_tip": "üí° You can select: single numbers (1), comma-separated (1,2,3),",
                "ranges_tip": "ranges (1-3), or 'all' for all apps",
                "select_apps": "üéØ Select apps for {} (or 'q' to cancel):",
                "selected_apps": "‚úÖ Selected {} apps:",
                "confirm_selection": "‚ùì Confirm selection? (y/n):",
                "cancelled": "‚ùå Cancelled",
                "no_apps_selected": "‚ùå No apps selected",
                "patching_apps": "üõ†Ô∏è Patching {} apps...",
                "patching_app": "üì¶ Patching {}...",
                "patching_success": "‚úÖ Successfully patched",
                "patching_failed": "‚ùå Patching failed",
                "restoring_apps": "üîÑ Restoring {} apps...",
                "restoring_app": "üì¶ Restoring {}...",
                "restoring_success": "‚úÖ Successfully restored",
                "restoring_failed": "‚ùå Restoring failed",
                "backup_question": "Create backups? (y/n):",
                "skip_backup_error": "‚ùå Skip due to backup error",
                "done_patching": "‚úÖ Done! Successfully patched {}/{} apps.",
                "done_restoring": "‚úÖ Done! Successfully restored {}/{} apps.",
                "no_target_apps": "‚ùå No target apps found",
                "no_patched_apps": "‚ÑπÔ∏è No patched apps found",
                "confirm_cleanup": "‚ùì Are you sure you want to delete all backups? (y/n):",
                "cleanup_cancelled": "‚ùå Cancelled",
                "searching_apps": "üîç Searching for target apps...",
                "found_apps": "üìã Found {} target apps:",
                "patched_status": " (patched)",
                "interactive_title": "üéØ App Patcher - Interactive Mode",
                "menu_options": [
                    "1. Find target apps",
                    "2. Patch all apps",
                    "3. Patch selected apps",
                    "4. Restore apps",
                    "5. Show patched apps",
                    "6. Remove backups",
                    "7. Change language",
                    "8. Exit"
                ],
                "choose_option": "üéØ Choose option (1-8):",
                "invalid_option": "‚ùå Invalid option. Try again.",
                "goodbye": "üëã Goodbye!",
                "language_changed": "‚úÖ Language changed to {}",
                "current_language": "üåê Current language: English",
                "choose_language": "Choose language:",
                "language_options": [
                    "1. English",
                    "2. Russian"
                ],
                "language_prompt": "Enter choice (1-2):"
            },
            "ru": {
                "backup_created": "‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {}",
                "backup_failed": "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {}",
                "app_patched": "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø–∞—Ç—á–µ–Ω–æ: {}",
                "launch_args": "üöÄ –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∑–∞–ø—É—Å–∫–∞: {}",
                "app_restored": "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {}",
                "backups_cleaned": "‚úÖ –í—Å–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —É–¥–∞–ª–µ–Ω—ã",
                "no_backups": "‚ÑπÔ∏è –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                "already_patched": "‚ÑπÔ∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {} —É–∂–µ –∑–∞–ø–∞—Ç—á–µ–Ω–æ",
                "plist_not_found": "‚ùå –û—à–∏–±–∫–∞: Info.plist –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {}",
                "executable_not_found": "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞",
                "executable_missing": "‚ùå –û—à–∏–±–∫–∞: –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª {} –Ω–µ –Ω–∞–π–¥–µ–Ω",
                "patching_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ç—á–∏–Ω–≥–µ {}: {}",
                "restore_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ {}: {}",
                "backup_not_found": "‚ùå –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –¥–ª—è {} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                "select_patch_mode": "üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã –ø–∞—Ç—á–∏–Ω–≥–∞:",
                "choose_mode": "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1-5):",
                "enter_custom_args": "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã:",
                "invalid_choice": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                "create_backup_question": "–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è {}? (y/n):",
                "yes_no_prompt": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 'y' –∏–ª–∏ 'n'",
                "available_apps": "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è {}:",
                "selection_tip": "üí° –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å: –æ—Ç–¥–µ–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ (1), —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (1,2,3),",
                "ranges_tip": "–¥–∏–∞–ø–∞–∑–æ–Ω—ã (1-3), –∏–ª–∏ 'all' –¥–ª—è –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π",
                "select_apps": "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è {} (–∏–ª–∏ 'q' –¥–ª—è –æ—Ç–º–µ–Ω—ã):",
                "selected_apps": "‚úÖ –í—ã–±—Ä–∞–Ω–æ {} –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π:",
                "confirm_selection": "‚ùì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä? (y/n):",
                "cancelled": "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",
                "no_apps_selected": "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                "patching_apps": "üõ†Ô∏è –ü–∞—Ç—á–∏–Ω–≥ {} –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π...",
                "patching_app": "üì¶ –ü–∞—Ç—á–∏–Ω–≥ {}...",
                "patching_success": "‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∞—Ç—á–µ–Ω–æ",
                "patching_failed": "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ç—á–∏–Ω–≥–∞",
                "restoring_apps": "üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ {} –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π...",
                "restoring_app": "üì¶ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ {}...",
                "restoring_success": "‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
                "restoring_failed": "‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è",
                "backup_question": "–°–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏? (y/n):",
                "skip_backup_error": "‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è",
                "done_patching": "‚úÖ –ì–æ—Ç–æ–≤–æ! –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∞—Ç—á–µ–Ω–æ {}/{} –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.",
                "done_restoring": "‚úÖ –ì–æ—Ç–æ–≤–æ! –£—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {}/{} –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.",
                "no_target_apps": "‚ùå –¶–µ–ª–µ–≤—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                "no_patched_apps": "‚ÑπÔ∏è –ó–∞–ø–∞—Ç—á–µ–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                "confirm_cleanup": "‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏? (y/n):",
                "cleanup_cancelled": "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",
                "searching_apps": "üîç –ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π...",
                "found_apps": "üìã –ù–∞–π–¥–µ–Ω–æ {} —Ü–µ–ª–µ–≤—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π:",
                "patched_status": " (–∑–∞–ø–∞—Ç—á–µ–Ω–æ)",
                "interactive_title": "üéØ App Patcher - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º",
                "menu_options": [
                    "1. –ù–∞–π—Ç–∏ —Ü–µ–ª–µ–≤—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                    "2. –ó–∞–ø–∞—Ç—á–∏—Ç—å –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                    "3. –ó–∞–ø–∞—Ç—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                    "4. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                    "5. –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∞—Ç—á–µ–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                    "6. –£–¥–∞–ª–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏",
                    "7. –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
                    "8. –í—ã—Ö–æ–¥"
                ],
                "choose_option": "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-8):",
                "invalid_option": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                "goodbye": "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!",
                "language_changed": "‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {}",
                "current_language": "üåê –¢–µ–∫—É—â–∏–π —è–∑—ã–∫: –†—É—Å—Å–∫–∏–π",
                "choose_language": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
                "language_options": [
                    "1. –ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
                    "2. –†—É—Å—Å–∫–∏–π"
                ],
                "language_prompt": "–í–≤–µ–¥–∏—Ç–µ –≤—ã–±–æ—Ä (1-2):"
            }
        }
    
    def t(self, key: str, *args) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É"""
        translation = self.translations[self.language].get(key, key)
        return translation.format(*args) if args else translation
    
    def set_language(self, language: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫"""
        if language in self.translations:
            self.language = language
    
    def find_target_applications(self) -> Dict[str, Path]:
        """–ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Ü–µ–ª–µ–≤—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö"""
        target_apps = {}
        
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        search_dirs = [self.applications_dir, self.user_applications_dir]
        
        for search_dir in search_dirs:
            if not search_dir.exists():
                continue
            
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ .app bundles
            for app_path in search_dir.rglob("*.app"):
                app_name = app_path.stem
                
                if self._is_target_app(app_name, app_path):
                    target_apps[app_name] = app_path
        
        return target_apps
    
    def _is_target_app(self, app_name: str, app_path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–≤—ã–º –¥–ª—è –ø–∞—Ç—á–∏–Ω–≥–∞"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        for target in self.target_apps:
            if target.lower() in app_name.lower():
                return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Xcode
        if self._is_xcode_related(app_name, app_path):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Chromium/Electron –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Info.plist
        try:
            info_plist = app_path / "Contents" / "Info.plist"
            if info_plist.exists():
                with open(info_plist, 'rb') as f:
                    plist_data = plistlib.load(f)
                
                bundle_id = plist_data.get('CFBundleIdentifier', '')
                executable = plist_data.get('CFBundleExecutable', '')
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ bundle identifier –∏ –∏–º–µ–Ω–∏ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
                if any(x in bundle_id.lower() for x in ['chromium', 'chrome', 'electron', 'yandex']):
                    return True
                
                if any(x in executable.lower() for x in ['chromium', 'chrome', 'electron']):
                    return True
        except Exception as e:
            print(f"   Warning: Could not read Info.plist for {app_name}: {e}")
        
        return False
    
    def _is_xcode_related(self, app_name: str, app_path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫ Xcode"""
        xcode_indicators = ['xcode', 'simulator', 'instruments']
        app_name_lower = app_name.lower()
        path_lower = str(app_path).lower()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –ø—É—Ç–∏
        for indicator in xcode_indicators:
            if indicator in app_name_lower:
                return True
        
        if '/xcode.app/contents/applications/' in path_lower:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Info.plist
        try:
            info_plist = app_path / "Contents" / "Info.plist"
            if info_plist.exists():
                with open(info_plist, 'rb') as f:
                    plist_data = plistlib.load(f)
                
                bundle_id = plist_data.get('CFBundleIdentifier', '')
                if 'com.apple.dt' in bundle_id or 'xcode' in bundle_id.lower():
                    return True
        except:
            pass
        
        return False
    
    def backup_app(self, app_name: str, app_path: Path) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–∞—Ç—á–∏–Ω–≥–æ–º"""
        try:
            self.backup_dir.mkdir(parents=True, exist_ok=True)
            backup_path = self.backup_dir / f"{app_name}.app"
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π backup –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if backup_path.exists():
                shutil.rmtree(backup_path)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ backup –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—É
            shutil.copytree(app_path, backup_path)
            print(self.t("backup_created", backup_path))
            return True
        except Exception as e:
            print(self.t("backup_failed", e))
            return False
    
    def is_already_patched(self, app_path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø–∞—Ç—á–µ–Ω–æ"""
        try:
            macos_dir = app_path / "Contents" / "MacOS"
            if not macos_dir.exists():
                return False
            
            # –ò—â–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª
            for item in macos_dir.iterdir():
                if item.name.endswith('.original'):
                    return True
            
            return False
        except:
            return False
    
    def patch_app(self, app_name: str, app_path: Path, patch_mode: str = "gl", custom_args: str = "") -> bool:
        """–ü–∞—Ç—á–∏–Ω–≥ .app bundle –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–∞—Ç—á–µ–Ω–æ –ª–∏ —É–∂–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            if self.is_already_patched(app_path):
                print(self.t("already_patched", app_name))
                return True
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
            info_plist = app_path / "Contents" / "Info.plist"
            if not info_plist.exists():
                print(self.t("plist_not_found", app_path))
                return False
            
            with open(info_plist, 'rb') as f:
                plist_data = plistlib.load(f)
            
            executable_name = plist_data.get('CFBundleExecutable', '')
            if not executable_name:
                print(self.t("executable_not_found"))
                return False
            
            # –ü—É—Ç—å –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É
            macos_dir = app_path / "Contents" / "MacOS"
            original_executable = macos_dir / executable_name
            
            if not original_executable.exists():
                print(self.t("executable_missing", executable_name))
                return False
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª
            original_backup = macos_dir / f"{executable_name}.original"
            if original_backup.exists():
                original_backup.unlink()
            
            original_executable.rename(original_backup)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∑–∞–ø—É—Å–∫–∞
            launch_args = self.patch_modes.get(patch_mode, "--use-angle=gl")
            if patch_mode == "custom" and custom_args:
                launch_args = custom_args
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç-–∑–∞–≥—Ä—É–∑—á–∏–∫
            new_executable = macos_dir / executable_name
            
            script_content = f'''#!/bin/bash

# Auto-launch script for {app_name}
ORIGINAL_EXECUTABLE="$(dirname "$0")/{executable_name}.original"
APP_NAME="{app_name}"

echo "Launching $APP_NAME with arguments: {launch_args}"

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
exec "$ORIGINAL_EXECUTABLE" {launch_args} "$@"
'''
            
            new_executable.write_text(script_content)
            new_executable.chmod(0o755)  # –î–µ–ª–∞–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
            
            print(self.t("app_patched", new_executable))
            print(self.t("launch_args", launch_args))
            
            return True
            
        except Exception as e:
            print(self.t("patching_error", app_name, e))
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            try:
                if 'original_backup' in locals() and original_backup.exists():
                    if new_executable.exists():
                        new_executable.unlink()
                    original_backup.rename(original_executable)
            except:
                pass
            return False
    
    def restore_app(self, app_name: str, app_path: Path) -> bool:
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        try:
            backup_path = self.backup_dir / f"{app_name}.app"
            
            if not backup_path.exists():
                print(self.t("backup_not_found", app_name))
                return False
            
            # –£–¥–∞–ª—è–µ–º –ø–∞—Ç—á–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            if app_path.exists():
                shutil.rmtree(app_path)
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ backup
            shutil.copytree(backup_path, app_path)
            print(self.t("app_restored", backup_path))
            
            return True
            
        except Exception as e:
            print(self.t("restore_error", app_name, e))
            return False
    
    def list_patched_apps(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∞—Ç—á–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π (–∏–º–µ—é—â–∏—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏)"""
        patched_apps = []
        
        if not self.backup_dir.exists():
            return patched_apps
        
        for backup in self.backup_dir.glob("*.app"):
            patched_apps.append(backup.stem)
        
        return patched_apps
    
    def cleanup_backups(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
        if self.backup_dir.exists():
            shutil.rmtree(self.backup_dir)
            print(self.t("backups_cleaned"))
        else:
            print(self.t("no_backups"))


def parse_selection(input_str: str, max_number: int) -> Set[int]:
    """
    –ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã: 1, 1,2,3, 1-3, 1,3-5, all
    """
    input_str = input_str.strip().lower()
    
    if input_str == 'all':
        return set(range(1, max_number + 1))
    
    selected_numbers = set()
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º
    parts = input_str.split(',')
    
    for part in parts:
        part = part.strip()
        if '-' in part:
            # –î–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1-3)
            range_parts = part.split('-')
            if len(range_parts) == 2:
                try:
                    start = int(range_parts[0])
                    end = int(range_parts[1])
                    if 1 <= start <= end <= max_number:
                        selected_numbers.update(range(start, end + 1))
                    else:
                        print(f"   ‚ùå Invalid range: {part}")
                except ValueError:
                    print(f"   ‚ùå Invalid range format: {part}")
        else:
            # –û–¥–∏–Ω–æ—á–Ω–æ–µ —á–∏—Å–ª–æ
            try:
                num = int(part)
                if 1 <= num <= max_number:
                    selected_numbers.add(num)
                else:
                    print(f"   ‚ùå Number out of range: {num}")
            except ValueError:
                print(f"   ‚ùå Invalid number format: {part}")
    
    return selected_numbers


def select_apps_from_list(patcher: AppPatcher, apps_list: List[Tuple[str, Path]], action: str) -> List[Tuple[str, Path]]:
    """
    –í—ã–±–æ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    """
    if not apps_list:
        print(patcher.t("no_target_apps"))
        return []
    
    print(patcher.t("available_apps", action))
    for i, (name, path) in enumerate(apps_list, 1):
        status = patcher.t("patched_status") if name in patcher.list_patched_apps() else ""
        print(f"   {i}. {name}{status}")
    
    print(f"   {patcher.t('selection_tip')}")
    print(f"   {patcher.t('ranges_tip')}")
    
    while True:
        try:
            selection = input(patcher.t("select_apps", action)).strip()
            
            if selection.lower() in ['q', 'quit', 'exit', 'cancel']:
                print(patcher.t("cancelled"))
                return []
            
            if not selection:
                print(patcher.t("no_apps_selected"))
                continue
            
            selected_numbers = parse_selection(selection, len(apps_list))
            
            if not selected_numbers:
                print(patcher.t("no_apps_selected"))
                continue
            
            selected_apps = []
            for num in sorted(selected_numbers):
                selected_apps.append(apps_list[num - 1])
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
            print(patcher.t("selected_apps", len(selected_apps)))
            for i, (name, path) in enumerate(selected_apps, 1):
                print(f"   {i}. {name}")
            
            confirm = input(patcher.t("confirm_selection")).strip().lower()
            if confirm in ['y', 'yes', '–¥', '–¥–∞']:
                return selected_apps
            else:
                print(patcher.t("cancelled"))
                
        except Exception as e:
            print(f"‚ùå Input processing error: {e}")
            continue


def select_patch_mode(patcher: AppPatcher) -> Tuple[str, str]:
    """–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø–∞—Ç—á–∏–Ω–≥–∞"""
    modes = [
        ("1", "gl", "OpenGL (--use-angle=gl)"),
        ("2", "metal", "Metal (--use-angle=metal)"),
        ("3", "vulkan", "Vulkan (--use-vulkan)"),
        ("4", "disable-gpu", "Disable GPU (--disable-gpu)"),
        ("5", "custom", "Custom arguments")
    ]
    
    print(patcher.t("select_patch_mode"))
    for num, mode, desc in modes:
        print(f"   {num}. {desc}")
    
    while True:
        choice = input(patcher.t("choose_mode")).strip()
        for num, mode, desc in modes:
            if choice == num:
                if mode == "custom":
                    custom_args = input(patcher.t("enter_custom_args")).strip()
                    return mode, custom_args
                return mode, ""
        
        print(patcher.t("invalid_choice"))


def ask_backup_confirmation(patcher: AppPatcher, app_name: str) -> bool:
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    while True:
        response = input(patcher.t("create_backup_question", app_name)).strip().lower()
        if response in ['y', 'yes', '–¥', '–¥–∞']:
            return True
        elif response in ['n', 'no', '–Ω', '–Ω–µ—Ç']:
            return False
        else:
            print(patcher.t("yes_no_prompt"))


def change_language(patcher: AppPatcher) -> bool:
    """–°–º–µ–Ω–∞ —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    print(patcher.t("choose_language"))
    print(f"   1. English")
    print(f"   2. –†—É—Å—Å–∫–∏–π")
    
    while True:
        choice = input(patcher.t("language_prompt")).strip()
        if choice == "1":
            patcher.set_language("en")
            print(patcher.t("language_changed", "English"))
            return True
        elif choice == "2":
            patcher.set_language("ru")
            print(patcher.t("language_changed", "Russian"))
            return True
        else:
            print(patcher.t("invalid_choice"))


def interactive_mode(patcher: AppPatcher):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π"""
    while True:
        print("\n" + "="*50)
        print(patcher.t("interactive_title"))
        print("="*50)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫
        print(patcher.t("current_language"))
        print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        for option in patcher.t("menu_options"):
            print(option)
        
        choice = input(f"\n{patcher.t('choose_option')} ").strip()
        
        if choice == "1":
            print(patcher.t("searching_apps"))
            apps = patcher.find_target_applications()
            apps_list = list(apps.items())
            
            if not apps_list:
                print(patcher.t("no_target_apps"))
                continue
            
            print(patcher.t("found_apps", len(apps_list)))
            for i, (name, path) in enumerate(apps_list, 1):
                status = patcher.t("patched_status") if name in patcher.list_patched_apps() else ""
                print(f"   {i}. {name}{status}")
        
        elif choice == "2":
            print(patcher.t("searching_apps"))
            apps = patcher.find_target_applications()
            apps_list = list(apps.items())
            
            if not apps_list:
                print(patcher.t("no_target_apps"))
                continue
            
            patch_mode, custom_args = select_patch_mode(patcher)
            backup_choice = input(patcher.t("backup_question")).strip().lower() in ['y', 'yes', '–¥', '–¥–∞']
            
            print(patcher.t("patching_apps", len(apps_list)))
            success_count = 0
            
            for name, path in apps_list:
                print(patcher.t("patching_app", name))
                
                if backup_choice:
                    if not patcher.backup_app(name, path):
                        print(patcher.t("skip_backup_error"))
                        continue
                
                if patcher.patch_app(name, path, patch_mode, custom_args):
                    success_count += 1
                    print(patcher.t("patching_success"))
                else:
                    print(patcher.t("patching_failed"))
            
            print(patcher.t("done_patching", success_count, len(apps_list)))
        
        elif choice == "3":
            print(patcher.t("searching_apps"))
            apps = patcher.find_target_applications()
            apps_list = list(apps.items())
            
            if not apps_list:
                print(patcher.t("no_target_apps"))
                continue
            
            selected_apps = select_apps_from_list(patcher, apps_list, "patching")
            if not selected_apps:
                continue
            
            patch_mode, custom_args = select_patch_mode(patcher)
            backup_choice = input(patcher.t("backup_question")).strip().lower() in ['y', 'yes', '–¥', '–¥–∞']
            
            print(patcher.t("patching_apps", len(selected_apps)))
            success_count = 0
            
            for name, path in selected_apps:
                print(patcher.t("patching_app", name))
                
                if backup_choice:
                    if not patcher.backup_app(name, path):
                        print(patcher.t("skip_backup_error"))
                        continue
                
                if patcher.patch_app(name, path, patch_mode, custom_args):
                    success_count += 1
                    print(patcher.t("patching_success"))
                else:
                    print(patcher.t("patching_failed"))
            
            print(patcher.t("done_patching", success_count, len(selected_apps)))
        
        elif choice == "4":
            patched_apps = patcher.list_patched_apps()
            
            if not patched_apps:
                print(patcher.t("no_patched_apps"))
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∞—Ç—á–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö
            all_apps = patcher.find_target_applications()
            apps_to_restore = []
            
            for app_name in patched_apps:
                if app_name in all_apps:
                    apps_to_restore.append((app_name, all_apps[app_name]))
            
            if not apps_to_restore:
                print(patcher.t("no_patched_apps"))
                continue
            
            selected_apps = select_apps_from_list(patcher, apps_to_restore, "restoring")
            if not selected_apps:
                continue
            
            print(patcher.t("restoring_apps", len(selected_apps)))
            success_count = 0
            
            for name, path in selected_apps:
                print(patcher.t("restoring_app", name))
                if patcher.restore_app(name, path):
                    success_count += 1
                    print(patcher.t("restoring_success"))
                else:
                    print(patcher.t("restoring_failed"))
            
            print(patcher.t("done_restoring", success_count, len(selected_apps)))
        
        elif choice == "5":
            patched_apps = patcher.list_patched_apps()
            
            if patched_apps:
                print("üì¶ " + ("Patched apps:" if patcher.language == "en" else "–ó–∞–ø–∞—Ç—á–µ–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:"))
                for app_name in patched_apps:
                    print(f"   ‚Ä¢ {app_name}")
            else:
                print(patcher.t("no_patched_apps"))
        
        elif choice == "6":
            confirm = input(patcher.t("confirm_cleanup")).strip().lower()
            if confirm in ['y', 'yes', '–¥', '–¥–∞']:
                patcher.cleanup_backups()
            else:
                print(patcher.t("cleanup_cancelled"))
        
        elif choice == "7":
            change_language(patcher)
        
        elif choice == "8":
            print(patcher.t("goodbye"))
            break
        
        else:
            print(patcher.t("invalid_option"))


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    parser = argparse.ArgumentParser(description="Patch .app bundles to launch with various flags")
    parser.add_argument('--list', action='store_true', help='Show target applications')
    parser.add_argument('--patch', action='store_true', help='Patch all target applications')
    parser.add_argument('--app', type=str, help='Patch specific application')
    parser.add_argument('--restore', type=str, help='Restore specific application')
    parser.add_argument('--restore-all', action='store_true', help='Restore all applications')
    parser.add_argument('--patched', action='store_true', help='Show patched applications')
    parser.add_argument('--cleanup', action='store_true', help='Remove backups')
    parser.add_argument('--mode', type=str, choices=['gl', 'metal', 'vulkan', 'disable-gpu', 'custom'], 
                       default='gl', help='Patch mode (default: gl)')
    parser.add_argument('--args', type=str, help='Custom arguments for custom mode')
    parser.add_argument('--no-backup', action='store_true', help='Do not create backups')
    parser.add_argument('--lang', type=str, choices=['en', 'ru'], default='en', help='Interface language')
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—á–µ—Ä —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º
    patcher = AppPatcher(language=args.lang)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if args.list:
        print(patcher.t("searching_apps"))
        apps = patcher.find_target_applications()
        print(patcher.t("found_apps", len(apps)))
        for name, path in apps.items():
            status = patcher.t("patched_status") if name in patcher.list_patched_apps() else ""
            print(f"   ‚Ä¢ {name}{status}")
    
    elif args.patch:
        print(patcher.t("searching_apps"))
        apps = patcher.find_target_applications()
        
        if not apps:
            print(patcher.t("no_target_apps"))
            return
        
        print(patcher.t("patching_apps", len(apps)))
        success_count = 0
        
        for name, path in apps.items():
            print(patcher.t("patching_app", name))
            
            # –°–æ–∑–¥–∞–µ–º backup –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –æ–±—Ä–∞—Ç–Ω–æ–µ
            if not args.no_backup:
                patcher.backup_app(name, path)
            
            if patcher.patch_app(name, path, args.mode, args.args):
                success_count += 1
                print(patcher.t("patching_success"))
            else:
                print(patcher.t("patching_failed"))
        
        print(patcher.t("done_patching", success_count, len(apps)))
    
    elif args.app:
        print(f"üîç Searching for {args.app}...")
        apps = patcher.find_target_applications()
        found_apps = [(name, path) for name, path in apps.items() if args.app.lower() in name.lower()]
        
        if not found_apps:
            print(f"‚ùå Application '{args.app}' not found")
            return
        
        if len(found_apps) > 1:
            print("üîç Multiple applications found:")
            for i, (name, path) in enumerate(found_apps, 1):
                print(f"   {i}. {name}")
            
            try:
                choice = int(input("Select application: ")) - 1
                if 0 <= choice < len(found_apps):
                    name, path = found_apps[choice]
                else:
                    print("‚ùå Invalid selection")
                    return
            except ValueError:
                print("‚ùå Invalid input")
                return
        else:
            name, path = found_apps[0]
        
        # –°–æ–∑–¥–∞–µ–º backup –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –æ–±—Ä–∞—Ç–Ω–æ–µ
        if not args.no_backup:
            patcher.backup_app(name, path)
        
        print(patcher.t("patching_app", name))
        if patcher.patch_app(name, path, args.mode, args.args):
            print(f"‚úÖ {name} successfully patched!")
        else:
            print(f"‚ùå Error patching {name}")
    
    elif args.restore:
        apps = patcher.find_target_applications()
        found_apps = [(name, path) for name, path in apps.items() if args.restore.lower() in name.lower()]
        
        if not found_apps:
            print(f"‚ùå Application '{args.restore}' not found")
            return
        
        if len(found_apps) > 1:
            print("üîç Multiple applications found:")
            for i, (name, path) in enumerate(found_apps, 1):
                print(f"   {i}. {name}")
            
            try:
                choice = int(input("Select application: ")) - 1
                if 0 <= choice < len(found_apps):
                    name, path = found_apps[choice]
                else:
                    print("‚ùå Invalid selection")
                    return
            except ValueError:
                print("‚ùå Invalid input")
                return
        else:
            name, path = found_apps[0]
        
        print(patcher.t("restoring_app", name))
        if patcher.restore_app(name, path):
            print(f"‚úÖ {name} successfully restored!")
        else:
            print(f"‚ùå Error restoring {name}")
    
    elif args.restore_all:
        patched_apps = patcher.list_patched_apps()
        
        if not patched_apps:
            print(patcher.t("no_patched_apps"))
            return
        
        apps = patcher.find_target_applications()
        restored_count = 0
        
        for app_name in patched_apps:
            if app_name in apps:
                print(patcher.t("restoring_app", app_name))
                if patcher.restore_app(app_name, apps[app_name]):
                    restored_count += 1
        
        print(patcher.t("done_restoring", restored_count, len(patched_apps)))
    
    elif args.patched:
        patched_apps = patcher.list_patched_apps()
        
        if patched_apps:
            print("üì¶ " + ("Patched applications:" if patcher.language == "en" else "–ó–∞–ø–∞—Ç—á–µ–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:"))
            for app_name in patched_apps:
                print(f"   ‚Ä¢ {app_name}")
        else:
            print(patcher.t("no_patched_apps"))
    
    elif args.cleanup:
        confirm = input(patcher.t("confirm_cleanup")).strip().lower()
        if confirm in ['y', 'yes', '–¥', '–¥–∞']:
            patcher.cleanup_backups()
        else:
            print(patcher.t("cleanup_cancelled"))
    
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        interactive_mode(patcher)


if __name__ == "__main__":
    main()
